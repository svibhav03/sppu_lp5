import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense
from sklearn.metrics import mean_absolute_error

# Load the datasets
train_data = pd.read_csv('Google_Stock_Train (2010-2022).csv')
test_data = pd.read_csv('Google_Stock_Test (2023).csv')

# Plot training data
plt.plot(train_data['Close'])
plt.title("Google Stock Prices (2010â€“2022)")
plt.xlabel("Days")
plt.ylabel("Price")
plt.show()

# Scale the training closing prices between 0 and 1
scaler = MinMaxScaler()
scaled_train = scaler.fit_transform(train_data[['Close']])

# Create training sequences (last 60 days used to predict next day)
X_train, y_train = [], []
for i in range(60, len(scaled_train)):
    X_train.append(scaled_train[i-60:i])
    y_train.append(scaled_train[i])

X_train, y_train = np.array(X_train), np.array(y_train)

# Build a simple RNN model
model = Sequential([
    SimpleRNN(50, input_shape=(60, 1)),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Prepare test data (last 60 days from training + test set)
all_data = pd.concat([train_data['Close'], test_data['Close']], axis=0)
inputs = all_data[-(len(test_data) + 60):].values.reshape(-1, 1)
scaled_inputs = scaler.transform(inputs)

X_test = []
for i in range(60, len(scaled_inputs)):
    X_test.append(scaled_inputs[i-60:i])

X_test = np.array(X_test)

# Predict and reverse scaling
predictions = model.predict(X_test)
predicted_prices = scaler.inverse_transform(predictions)

# Calculate accuracy
actual_prices = test_data['Close'].values
mae = mean_absolute_error(actual_prices, predicted_prices)
accuracy = 100 - (mae / np.mean(actual_prices) * 100)

print(f"MAE: {mae:.2f}")
print(f"Accuracy: {accuracy:.2f}%")

# Plot the results
plt.plot(actual_prices, label='Actual')
plt.plot(predicted_prices, label='Predicted')
plt.title("Stock Price Prediction (2023)")
plt.xlabel("Days")
plt.ylabel("Price")
plt.legend()
plt.show()
